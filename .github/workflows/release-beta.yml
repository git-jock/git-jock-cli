name: Release Beta

on:
  push:
    branches: [ main ]

jobs:
  release-beta:
    if: |
      !contains(github.event.head_commit.message, '[skip-beta]')
    name: Release Beta
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Set version
        run: |
          echo "NEW_VERSION=$(./scripts/set_version beta)" >> $GITHUB_ENV
      - name: Install pep517
        run: >-
          python -m
          pip install
          pep517
          --user
      - name: Build a binary wheel and a source tarball
        run: >-
          python -m
          pep517.build
          --source
          --binary
          --out-dir dist/
          .
      - name: Publish distribution to Test PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.test_pypi_password }}
          repository_url: https://test.pypi.org/legacy/
      - name: Set version
        run: |
          echo "CURRENT_BRANCH=$(git branch --show-current)" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE='Released $NEW_VERSION to Test PyPI'" >> $GITHUB_ENV
      - name: Create release branch
        run: |
          git config --global user.name 'GitHub'
          git config --global user.email 'github@users.noreply.github.com'
          git checkout -b release-$NEW_VERSION
          git add ./setup.py ./pyproject.toml
          git commit -m "$COMMIT_MESSAGE"
          git push --set-upstream origin release-$NEW_VERSION
          echo "CURRENT_REF=$(git show-ref --hash --head HEAD)" >> $GITHUB_ENV
      - name: Create release PR
        id: create-release-pr
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            return await octokit.request('POST /repos/{owner}/{repo}/pulls', {
              owner: 'GavinF17',
              repo: 'git-jock',
              head: 'release-${{ process.env.NEW_VERSION }}',
              base: '${{ process.env.CURRENT_BRANCH }}',
              title: '${{ process.env.COMMIT_MESSAGE }}'
            })
      - name: Approve release PR
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GIT_JOCK }}
          script: |
            await octokit.request('POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews', {
              owner: 'GavinF17',
              repo: 'git-jock',
              pull_number: ${{ steps.create-release-pr.outputs.result.id }},
              event: 'APPROVE'
            })
      - name: Merge release PR
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let retries = 0
            const checkStatus = () => {
              const checks = await octokit.request('GET /repos/{owner}/{repo}/commits/{ref}/check-runs', {
                owner: 'GavinF17',
                repo: 'git-jock',
                ref: '${{ process.env.CURRENT_REF }}'
              })

              const done = checks.check_runs
                .every(run => run.conclusion === "completed" || run.conclusion === "skipped")

              if (done) {
                await octokit.request('PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge', {
                  owner: 'GavinF17',
                  repo: 'git-jock',
                  pull_number: ${{ steps.create-release-pr.outputs.result.id }},
                  commit_title: '${{ process.env.COMMIT_MESSAGE }}',
                  merge_method: 'squash'
                })
              } else {
                (++retries < 30) && setTimeout(checkStatus, 10000)
              }
            }